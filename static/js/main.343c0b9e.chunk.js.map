{"version":3,"sources":["reducers/products.js","actionTypes/index.js","api/shop.js","containers/BooksContainer/index.js","actionCreators/index.js","reducers/cart.js","reducers/index.js","containers/CartContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["products","state","action","type","inventory","combineReducers","byId","reduce","obj","product","id","productId","visibleIds","map","getProduct","getVisibleProducts","getProducts","cb","timeout","setTimeout","_products","buyProducts","payload","connect","addToCart","dispatch","getState","addToCartAction","key","title","price","onClick","disabled","initialState","addedIds","quantityById","indexOf","cart","getAddedIds","fromCart","getQuantity","fromProducts","getTotal","total","toFixed","getCartProducts","quantity","checkout","shop","byProducts","hasProducts","length","App","Boolean","window","location","hostname","match","middleware","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","getProductsActions","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.343c0b9e.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\nimport { RECEIVE_PRODUCTS, ADD_TO_CART } from '../actionTypes'\r\n\r\n\r\n/**\r\n * products n *\r\n */\r\nconst products = ( state, action ) => {\r\n    switch ( action.type ) {\r\n        case ADD_TO_CART:\r\n            return {\r\n                ...state,\r\n                inventory: state.inventory - 1\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nconst byId = ( state = {}, action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                ...action.products.reduce((obj, product) => {\r\n                    obj[product.id] = product\r\n                    return obj\r\n                }, {}) // \r\n            }\r\n        default: \r\n        const { productId } = action\r\n        if (productId) {\r\n            return {\r\n                ...state,\r\n                [productId]: products(state[productId], action)\r\n            }\r\n        }\r\n        return state\r\n    }\r\n}\r\n\r\nconst visibleIds = (state = [], action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_PRODUCTS:\r\n            return action.products.map(product => product.id)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n \r\n export default combineReducers({\r\n     byId,\r\n     visibleIds\r\n })\r\n\r\n\r\n export const getProduct = (state, id) => state.byId[id]\r\n export const getVisibleProducts = state => state.visibleIds.map(id => getProduct(state, id))","export const RECEIVE_PRODUCTS = 'RECEIVE_PRODUCTS'\r\nexport const ADD_TO_CART = 'ADD_TO_CART'\r\nexport const CHECKOUT_FAILED = 'CHECKOUT_FAILED'\r\nexport const CHECKOUT_SUCCEED = 'CHECKOUT_SUCCEED'\r\nexport const CHECKOUT_REQUEST = 'CHECKOUT_REQUEST'","/**\r\n * mock client-end\r\n *  \r\n * \r\n * \r\n * \r\n */\r\n\r\n import _products from './products.json'\r\n\r\n const TIMEOUT = 100\r\n\r\n export default {\r\n     getProducts: (cb, timeout) => setTimeout(() => cb(_products), timeout || TIMEOUT),\r\n     buyProducts: (payload, cb, timeout) => setTimeout(() => cb(), timeout || TIMEOUT)\r\n }","/**\r\n * Okay let's finish the bookshelf\r\n */\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getVisibleProducts } from \"../../reducers/products\";\r\nimport { addToCart } from '../../actionCreators'\r\n\r\nconst BooksContainer = ({ products, addToCart }) => (\r\n  <div>\r\n    <h2>Bookshelf!</h2>\r\n    <div>\r\n      {products.map((product) => (\r\n        <div key={product.id}>\r\n          {product.title} --- ${product.price}/per Inventory:{\" \"}\r\n          {product.inventory ? `${product.inventory}` : null}\r\n          <button\r\n            onClick={() => addToCart(product.id)}\r\n            disabled={product.inventory > 0 ? \"\" : \"disabled\"}\r\n          >\r\n            {product.inventory > 0 ? \"add to cart\" : \"sold out :>\"}\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n    products: getVisibleProducts(state.products)\r\n});\r\n\r\nexport default connect(mapStateToProps, { addToCart })(BooksContainer);\r\n","import shop from '../api/shop.js'\r\nimport * as types from '../actionTypes'\r\n\r\n/**\r\n * \r\n * @param {get the books} products \r\n */\r\nconst getProductsActions = products => ({\r\n    type: types.RECEIVE_PRODUCTS,\r\n    products\r\n})\r\n\r\nexport const getAllProducts = () => dispatch => {\r\n    shop.getProducts(products => {\r\n        dispatch(getProductsActions(products))\r\n    })\r\n}\r\n\r\n/**\r\n * action: addtocart\r\n * @param productid\r\n */\r\n\r\n const addToCartAction = productId =>({\r\n     type: types.ADD_TO_CART,\r\n     productId\r\n })\r\n\r\n export const addToCart = productId => (dispatch, getState) => {\r\n     if ( getState().products.byId[productId].inventory > 0) {\r\n         dispatch(addToCartAction(productId))\r\n     }\r\n }\r\n\r\n /**\r\n  * \r\n  * \r\n  * check out!\r\n  */\r\n\r\nexport const checkout = products => (dispatch, getState) => {\r\n    const { cart } = getState()\r\n    dispatch({\r\n        type: types.CHECKOUT_REQUEST\r\n    })\r\n    shop.byProducts(products, () => {\r\n        dispatch({\r\n            type: types.CHECKOUT_SUCCEED,\r\n            cart\r\n        })\r\n    })\r\n    // CHECKOUT_FAILED\r\n}\r\n// 3 steps to create a action: define type, payload, actionCreator\r\n// then reducer\r\n// then shop","import { ADD_TO_CART, CHECKOUT_REQUEST, CHECKOUT_FAILED } from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  addedIds: [],\r\n  quantityById: [],\r\n};\r\n\r\nconst addedIds = (state = initialState.addedIds, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      if (state.indexOf(action.productId) !== -1) return state;\r\n      return [...state, action.productId];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst quantityById = (state = initialState.quantityById, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      const { productId } = action;\r\n      return { ...state, [productId]: (state[productId] || 0) + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getQuantity = (state, productId) =>\r\n  state.quantityById[productId] || 0;\r\n\r\n/**\r\n *\r\n * @param {get all items in cart when checkout} state\r\n */\r\nexport const getAddedIds = (state) => state.addedIds;\r\n\r\n/**\r\n *\r\n *\r\n *  checkout the cart */\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHECKOUT_REQUEST:\r\n      return initialState;\r\n    case CHECKOUT_FAILED:\r\n      return action.cart;\r\n    default:\r\n      return {\r\n        addedIds: addedIds(state.addedIds, action),\r\n        quantityById: quantityById(state.quantityById, action),\r\n      };\r\n  }\r\n};\r\nexport default cart;\r\n","// combineReducers\r\nimport { combineReducers } from 'redux'\r\nimport cart, * as fromCart from './cart'\r\nimport products, * as fromProducts from './products'\r\n\r\n/**\r\n * \r\n * cart and products\r\n */\r\nexport default combineReducers({\r\n    cart, \r\n    products\r\n})\r\n\r\n/**\r\n *  how much in total\r\n */\r\nconst getAddedIds = state => fromCart.getAddedIds(state.cart)\r\nconst getQuantity = (state, id) => fromCart.getQuantity(state.cart, id)\r\nconst getProduct = (state, id) => fromProducts.getProduct(state.products, id)\r\nexport const getTotal = state => \r\n    getAddedIds(state)\r\n    .reduce((total, id) =>\r\n    total + getProduct(state, id).price * getQuantity(state, id),\r\n    0\r\n    )\r\n    .toFixed(2)\r\n\r\n/**\r\n * get products list\r\n*/\r\nexport const getCartProducts = state => \r\n    getAddedIds(state).map(id => ({\r\n        ...getProduct(state, id),\r\n        quantity: getQuantity(state, id)\r\n    }))","/**\r\n * yeah, finally we've finished the reducer's part, let's build the UI part!\r\n */\r\nimport React from \"react\";\r\nimport { getTotal, getCartProducts } from \"../../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { checkout } from \"../../actionCreators\"\r\n\r\n/**\r\n * basiclly a map of products\r\n */\r\nconst CartContainer = ({ products, total, checkout }) => {\r\n  const hasProducts = products.length > 0;\r\n  return (\r\n    <div>\r\n      <h3>Welcome to the bookshop cart</h3>\r\n      <em>Please choose something!</em>\r\n      <div>\r\n        {\" \"}\r\n        {products.map((product) => (\r\n          <div key={product.id}>\r\n            ${product.title} - {product.price}\r\n            {product.quantity ? `* ${product.quantity}` : null}\r\n          </div>\r\n        ))}\r\n        <p>In total: ${total}</p>\r\n      </div>\r\n      <button\r\n        onClick={() => checkout(products)}\r\n        disabled={hasProducts ? \"\" : \"disabled\"}\r\n      >\r\n        Go checkout!\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  products: getCartProducts(state),\r\n  total: getTotal(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, { checkout })(CartContainer);\r\n","import React from \"react\";\n// import  A  from \"./ComponentA\";\n// import  B  from \"./ComponentB\";\nimport BooksContainer from \"./containers/BooksContainer\";\nimport CartContainer from \"./containers/CartContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      {/* <A /> */}\n      {/* <B /> */}\n      <BooksContainer />\n      <CartContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport thunk from \"redux-thunk\";\nimport  { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createLogger } from \"redux-logger\";\nimport reducer from \"./reducers\";\nimport { getAllProducts } from \"./actionCreators\";\nconst middleware = [thunk];\n\nif (process.env.NODE_ENV !== \"production\") {\n  middleware.push(createLogger());\n}\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(...middleware), )\n);\n\nstore.dispatch(getAllProducts());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}